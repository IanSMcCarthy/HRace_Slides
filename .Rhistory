theme(axis.text.x=element_text(angle=90))
ggplot(race3, aes(x=race3[,6])) +
geom_bar(binwidth = 0.01) +
theme_bw() +
theme(axis.text.x=element_text(angle=90))
ggplot(race3, aes(x=race3[,6])) +
geom_bar(binwidth = 0.1) +
theme_bw() +
theme(axis.text.x=element_text(angle=90))
ggplot(race3, aes(x=race3[,6])) +
geom_bar(binwidth = 0.1) +
theme_bw() +
theme(axis.text.x=element_text(angle=90)) +
xlab(win time in seconds)
ggplot(race3, aes(x=race3[,6])) +
geom_bar(binwidth = 0.1) +
theme_bw() +
theme(axis.text.x=element_text(angle=90)) +
xlab("win time in seconds")
ggplot(race3, aes(x=race3[,6])) +
geom_bar(binwidth = 0.1) +
theme_bw() +
theme(axis.text.x=element_text(angle=0)) +
xlab("win time in seconds")
race <- read.csv("~/Documents/Horses/Scripts_Packages/RandwickFull2.csv",
header=T, stringsAsFactors = F)
summary(race)
str(race)
Secs <- as.numeric(as.POSIXct(strptime(race[,5], format = "%M:%OS"))) -
as.numeric(as.POSIXct(strptime("0", format = "%S")))
race2 <- cbind(race,secs)
race2 <- cbind(race,Secs)
race3 <- race2[race2[,4]=="1600",]
hist(race3[,6],breaks=100)
summary(race3[,6])
race
race <- read.csv("~/Documents/Horses/Scripts_Packages/RandwickFull2.csv",
header=T, stringsAsFactors = F)
race <- read.csv("~/Documents/Horses/Scripts_Packages/RandwickFull2.csv",
header=T, stringsAsFactors = F)
summary(race)
str(race)
Secs <- as.numeric(as.POSIXct(strptime(race[,6], format = "%M:%OS"))) -
as.numeric(as.POSIXct(strptime("0", format = "%S")))
race2 <- cbind(race,Secs)
race3 <- race2[race2[,4]=="1600",]
summary(race3[,7])
library(ggplot2)
ggplot(race3, aes(x=race3[,7], fill = race3[,])) +
geom_bar(binwidth = 0.1) +
theme_bw() +
theme(axis.text.x=element_text(angle=0)) +
xlab("win time in seconds")
race3[,7]
ggplot(race3, aes(x=race3[,7], fill = race3[,5])) +
geom_bar(binwidth = 0.1) +
theme_bw() +
theme(axis.text.x=element_text(angle=0)) +
xlab("win time in seconds")
ggplot(race3, aes(x=race3[,7], fill = race3[,5])) +
geom_bar(binwidth = 0.5) +
theme_bw() +
theme(axis.text.x=element_text(angle=0)) +
xlab("win time in seconds")
summary(race3)
str(race3[,5])
unique(race3[,5])
finished <- horse_data[is.numeric(as.numeric(horse_data$Lengths)),]
horse_data <- read.csv("~/Documents/Horses/Phase 5/horse_data_2013.csv",header=T, stringsAsFactors = F)
# 1. Subset groups
finished <- horse_data[is.numeric(as.numeric(horse_data$Lengths)),]
head(finished)
tail(finished)
unique(horse_data$Lengths)
unique(horse_data$Position)
unique(finished$Position)
finished <- horse_data[is.numeric(as.numeric(horse_data$Lengths)),]
unique(finished$Position)
head(finished)
horse_data <- read.csv("~/Documents/Horses/Phase 5/horse_data_2013.csv",header=T, stringsAsFactors = F)
finished <- is.na(horse_data[is.numeric(as.numeric(horse_data$Lengths)),])
head(finished)
finished <- !is.na(horse_data[is.numeric(as.numeric(horse_data$Lengths)),])
head(finished)
finished <- horse_data[!is.na(horse_data[is.numeric(as.numeric(horse_data$Lengths)),]),]
head(finished)
tail(finished)
finished <- if (is.numeric(as.numeric(horse_data$Lengths)),])
finished <- if (horse_data[is.numeric(as.numeric(horse_data$Lengths),]))
finished <- horse_data[is.numeric(as.numeric(horse_data[,'Lengths']))==TRUE,]
horse_data <- read.csv("~/Documents/Horses/Phase 5/horse_data_2013.csv",header=T, stringsAsFactors = F)
finished <- horse_data[is.numeric(as.numeric(horse_data[,'Lengths']))==TRUE,]
head(finished)
tail(finished)
unique(finished[,11])
unique(horse_data[,11])
horse_data[100,12]
horse_data[105,12]
horse_data <- read.csv("~/Documents/Horses/Phase 5/horse_data_2013.csv",header=T, stringsAsFactors = F)
horse_data[105,12]
horse_data[105,11]
horse_data[105,10]
horse_data[105,13]
horse_data[105,14]
horse_data[105,15]
horse_data[105,16]
horse_data[105,17]
head(horse_data)
horse_data[105,13]
horse_data[105,14]
horse_data[109,13]
library(neuralnet)
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=F)
nn
str(infert)
summary(infert)
nn
?nn
?neuralnet
nn.call
call
summary(nn)
nn$result.matrix
nn <- neuralnet(formula=case~age+parity+induced+spontaneous,threshold=0.01, data=infert,hidden=2,err.fct="ce",linear.output=F)
nn
summary(nn)
nn$result.matrix
nn <- neuralnet(formula=case~age+parity+induced+spontaneous,threshold=0.01, data=infert,hidden=2,err.fct="ce",linear.output=FALSE)
nn
summary(nn)
nn$result.matrix
nn$net.result
nn$result.matrix
nn$covariate
nn$net.result # fitted values
nn$covariate
names(out) <- c('age','parity','induced','spontaneius','nn-output')
out <- cbind(nn$covariate, nn$net.result)
names(out) <- c('age','parity','induced','spontaneius','nn-output')
out
dimnames(out) <- c('age','parity','induced','spontaneius','nn-output')
out
out <- cbind(nn$covariate, nn$net.result[[1]])
dimnames(out) <- c('age','parity','induced','spontaneius','nn-output')
out
names(out) <- c('age','parity','induced','spontaneius','nn-output')
out
out <- cbind(nn$covariate, nn$net.result[[1]])
dimnames(out) <- list(NULL,c('age','parity','induced','spontaneius','nn-output'))
out
dimnames(out) <- list(NULL,c('age','parity','induced','spontaneous','nn-output'))
out
out <- cbind(nn$covariate, nn$net.result[[1]], nn$net.result[[2]])
head(infert)
out <- cbind(nn$covariate, infert$case, nn$net.result[[1]])
dimnames(out) <- list(NULL,c('age','parity','induced','spontaneous','case(true)', 'case(nn)'))
out
head(out)
head(infert)
nn.bp <- neuralnet(formula=case~age+parity+induced+spontaneous,threshold=0.01, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,algorithm='backprop', learningrate=0.01)
nn.bp
nn
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE, algorithm='rprop+', threshold=0.01)
nn
summary(nn)
nn$result.matrix # main results
nn$net.result # fitted values
nn$covariate
out <- cbind(nn$covariate, infert$case, nn$net.result[[1]])
dimnames(out) <- list(NULL,c('age','parity','induced','spontaneous','case(true)', 'case(nn)'))
head(out)
nn$result.matrix # main results
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE, algorithm='rprop+', threshold=0.01)
nn
summary(nn)
set.seed(100)
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE, algorithm='rprop+', threshold=0.01)
nn
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE, threshold=0.01)
nn
set.seed(100)
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,algorithm='rprop+' ,threshold=0.01)
nn
summary(nn)
nn$result.matrix # main results
nn$net.result # fitted values
nn$covariate
out <- cbind(nn$covariate, infert$case, nn$net.result[[1]])
dimnames(out) <- list(NULL,c('age','parity','induced','spontaneous','case(true)', 'case(nn)'))
head(out)
# Second NN
nn.bp <- neuralnet(formula=case~age+parity+induced+spontaneous,threshold=0.01, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,algorithm='backprop', learningrate=0.01)
nn.bp
nn
set.seed(100)
nn.bp <- neuralnet(formula=case~age+parity+induced+spontaneous,threshold=0.01, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,algorithm='backprop', learningrate=0.01)
nn.bp
nn
nn.bp <- neuralnet(formula=case~age+parity+induced+spontaneous,threshold=0.01, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,algorithm='backprop', learningrate=0.01)
nn.bp
nn
set.seed(100)
nn.nnet <- nnet(formula=case~age+parity+induced+spontaneous, data=infert,size=2,entropy=TRUE, abstol=0.01)
install.packages("nnet")
library(nnet)
set.seed(100)
nn.nnet <- nnet(formula=case~age+parity+induced+spontaneous, data=infert,size=2,entropy=TRUE, abstol=0.01)
nn.bp
nn.nnet
nn.bp
nn.nnet
nn.nnet <- nnet(formula=case~age+parity+induced+spontaneous, data=infert,size=2,entropy=TRUE, abstol=0.01)
nn.nnet
nn.nnet <- nnet(formula=case~age+parity+induced+spontaneous, data=infert,size=2,entropy=TRUE, abstol=0.01)
set.seed(100)
nn.nnet <- nnet(formula=case~age+parity+induced+spontaneous, data=infert,size=2,entropy=TRUE, abstol=0.01)
nn.bp
plot(nn)
plot(nn.bp)
plot(nn.bp)
plot(nn.nnet)
plot(nn.bp)
plot(nn.nnet)
plot(nn)
plot(nn)
par(mfrow=c(2,2))
par(mfrow=c(2,2))
gwplot(nn,selected.covariate='age',min=-2.5,max=5)
gwplot(nn,selected.covariate='parity',min=-2.5,max=5)
gwplot(nn,selected.covariate='induced',min=-2.5,max=5)
gwplot(nn,selected.covariate='spontaneous',min=-2.5,max=5)
new.output <- compute(nn, covariate=matrix(c(22,1,0,0,22,1,0,122,1,1,022,1,1,1),byrow=TRUE,ncol=4))
new.output <- compute(nn, covariate=matrix(c(22,1,0,0,22,1,0,1,22,1,1,0,22,1,1,1),byrow=TRUE,ncol=4))
new.output$net.result
new.output <- compute(nn, covariate=matrix(c(22,1,0,0,22,1,0,1,22,1,1,0,22,1,1,1),byrow=TRUE,ncol=4))
new.output$net.result
set.seed(100)
new.output <- compute(nn, covariate=matrix(c(22,1,0,0,22,1,0,1,22,1,1,0,22,1,1,1),byrow=TRUE,ncol=4))
new.output$net.result
set.seed(100)
nn.new <- neuralnet(formula=case~parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,algorithm='rprop+' ,threshold=0.01)
nn.new
ci <- confidence.interval(nn.new, alpha=0.05)
ci$lower.ci
nn.new <- neuralnet(formula=case~parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,threshold=0.01)
nn.new
ci <- confidence.interval(nn.new, alpha=0.05)
ci$lower.ci
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE ,threshold=0.01)
nn
set.seed(100)
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE ,threshold=0.01)
nn
set.seed(100)
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE ,threshold=0.01)
nn
summary(nn)
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE ,threshold=0.01)
nn
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE ,threshold=0.01)
nn
set.seed(100)
nn <- neuralnet(formula=case~age+parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE ,threshold=0.01)
nn
set.seed(100)
nn.new <- neuralnet(formula=case~parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,threshold=0.01)
nn.new
nn.new <- neuralnet(formula=case~parity+induced+spontaneous, data=infert,hidden=2,err.fct="ce",linear.output=FALSE,threshold=0.01)
nn.new
ci <- confidence.interval(nn.new, alpha=0.05)
ci$lower.ci
ci$lower.ci
plot(nn.new)
library(maps)
library(mapdata)
map("worldHires","Canada”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
library(maps)
library(mapdata)
install.packages("maps")
install.packages("mapdata")
library(maps)
library(mapdata)
map("worldHires","Canada”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
map("worldHires","Canada”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
map("worldHires","Canada", xlim=c(-141,-53), ylim=c(40,85), col="gray90", fill=TRUE)
map("worldHires","Canada", xlim=c(-141,-53), ylim=c(40,85), col="gray90", fill=TRUE)
map("worldHires","Australia", xlim=c(-141,-53), ylim=c(40,85), col="gray90", fill=TRUE)
map("worldHires","Australia")#, xlim=c(-141,-53), ylim=c(40,85), col="gray90", fill=TRUE)
map("state", interior = FALSE)
map("state", interior = FALSE)
map("state", boundary = FALSE, col="gray", add = TRUE)
map("Australia", interior = FALSE)
map("state", boundary = FALSE, col="gray", add = TRUE)
map("worldHires","Australia", interior = FALSE)
map("state", boundary = FALSE, col="gray", add = TRUE)
map("state", boundary = TRUE, col="gray", add = TRUE)
map("worldHires","Australia", interior = FALSE)
map("state", boundary = TRUE, col="gray", add = TRUE)
map("worldHires","New Zealand", interior = FALSE)
map("state", boundary = TRUE, col="gray", add = TRUE)
map("worldHires","UK", interior = FALSE)
install.packages("Quandl")
library(Quandl)
? Quandl
Quandl.auth("TxcUMc5VWWLy5tJF7TtL")
install.packages("devtools")
library(devtools)
install_github('R-package','quandl')
library(Quandl)
mydata = Quandl("FRED/GDP")
Quandl.auth("TxcUMc5VWWLy5tJF7TtL")
mydata = Quandl("FRED/GDP")
str(mydata)
head(mydata)
mytimeseries = Quandl("NSE/OIL", type="ts")
mytimeseries
head(mytimeseries)
mydata = Quandl(c("NSE/OIL.4","WIKI/AAPL.1"))
head(mydata)
Quandl.search(query = "crude oil", page = 2, source = "DOE", silent = TRUE)
Quandl.search(query = "crude oil", page = 2, source = "DOE", silent = FALSE)
mydata = Quandl("C/CME")
mydata = Quandl("C1/CME")
mydata = Quandl("CME/C1")
mydata = Quandl("CME/C")
mydata = Quandl("CBOT/C1")
mydata = Quandl("NSE/OIL")
mydata
head(mydata)
mydata = Quandl("OFDP/FUTURE_C1")
mydata = Quandl("OFDP/FUTURE_C1", start_date="2012-01-01")
mydata
plot(mydata[1],mydata[2])
head(mydata)
plot(mydata$Date, mydata$Settle)
library(ggplot2)
ggplot(mydata, aes(x=Date, y=Settle fill = Volume)) +
geom_bar(binwidth = 0.25) +
theme_bw() +
theme(axis.text.x=element_text(angle=0)) +
xlab("Win time in seconds")
ggplot(mydata, aes(x=Date, y=Settle size = Volume)) +
geom_bar(binwidth = 0.25) +
theme_bw() +
theme(axis.text.x=element_text(angle=0)) +
xlab("Win time in seconds")
ggplot(mydata, aes(x=Date, y=Settle size = Volume)) +
geom_point() +
theme_bw() +
theme(axis.text.x=element_text(angle=0)) +
xlab("Win time in seconds")
ggplot(mydata, aes(x=Date, y=Settle size = Volume)) +
geom_point() +
theme_bw()
mydata
ggplot(mydata, aes(x=Date, y=Settle size = Volume)) +
geom_point() +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, size = Volume)) +
geom_point() +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, size = Volume)) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle) +#, size = Volume)) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle) +#, size = Volume)) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle) + #, size = Volume)) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle)) + #, size = Volume)) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, size = Volume)) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, size = Volume, title='CBOT Corn Futures, Continuous Contract #1 (C1) (Front Month)'))) +
ggplot(mydata, aes(x=Date, y=Settle, size = Volume, title='CBOT Corn Futures, Continuous Contract #1 Front Month')) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, size = Volume, title="CBOT Corn Futures, Continuous Contract #1 Front Month")) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, title="CBOT Corn Futures, Continuous Contract #1 Front Month")) +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, title="CBOT Corn Futures, Continuous Contract #1 Front Month")) +
geom_line() +
geom_point(alpha=0.5) +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, title="CBOT Corn Futures, Continuous Contract #1 Front Month")) +
geom_line() +
geom_point() +
theme_bw()
ggplot(mydata, aes(x=Date, y=Settle, title="CBOT Corn Futures, Continuous Contract #1 Front Month")) +
geom_line() +
theme_bw()
install.packages("shiny")
#GoogleVis
library(googleVis)
?googleVis
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
?googleVis
vignette("googleVis")
demo(googleVis)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot()
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("Rcharts")
library("Rcharts")
library("rCharts")
install.packages("rCharts")
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library("rCharts")
?rChartd
?rCharts
??rCharts
source('~/.active-rstudio-document', echo=TRUE)
data(airquality)
data <- data(airquality)
str(data)
data()
airquality{datasets}
airquality
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
setwd("~/Documents/Programming/Languages/R/R Courses/R_DataProducts/Slidify")
setwd("~/Documents/Programming/Languages/R/R Courses/R_DataProducts/Slidify")
slidify('index.Rmd')
setwd("~/Documents/Programming/Languages/R/R Courses/R_DataProducts/Slidify/HorseRace_Slides")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
# Creating a Graph
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
x <- seq(1000, 2000, by=100)
y <- 0.06*x
plot(y, x)
plot(x, y)
abline(lm(x~y))
title("Average race times by distance")
x <- seq(1000, 2000, by=100)
y <- 0.06*x
plot(x, y)
abline(lm(x~y))
title("Average race times by distance")
xlab <- "Race Distance (m)"
x <- seq(1000, 2000, by=100)
y <- 0.06*x
plot(x, y)
abline(lm(x~y))
title("Average race times by distance")
xlab <- "Race Distance (m)"
x <- seq(1000, 2000, by=100)
y <- 0.06*x
plot(x, y, main="Average race times by distance",
xlab="Race Distance (m)", ylab="Winning Time (s)", pch=19)
abline(lm(x~y))
plot(x, y, main="Average race times by distance",
xlab="Race Distance (m)", ylab="Winning Time (s)", pch=19)
abline(lm(x~y), col="red")
abline(lm(y~x), col="red")
plot(x, y, main="Average winning race times by distance",
xlab="Race Distance (m)", ylab="Time (s)", pch=19)
abline(lm(y~x), col="red")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
